// src/types/wails.d.ts
// This import is conceptual for type-checking in this file.
// The actual 'main.Host' for Wails bindings will be generated by Wails
// into frontend/wailsjs/go/models.ts and used implicitly by App.d.ts.
import type { Host as GoHostDef } from './host'; // Assuming Host from host.ts matches Go's Host struct

export interface ScanHistoryItem {
  startIp: string;
  endIp: string;
  timestamp: string; // ISO string date, e.g., "2023-10-27T10:30:00Z"
}

// This interface must match the Go struct ScanRange in scan.go
export interface WailsScanParameters {
  startIp: string; 
  endIp: string;   
  ports: number[]; 
  searchHiddenHosts: boolean; 
  hiddenHostsPorts: number[]; 
}

export interface HostStatusUpdate {
  ipAddress: string;
  isOnline: boolean;
}

// This type should align with the main.Host struct in Go (scan.go)
// Wails will generate a similar type in frontend/wailsjs/go/models.ts
export interface Host {
    ipAddress: string;
    hostname?: string;
    macAddress?: string;
    os?: string;
    openPorts?: number[];
    deviceType?: string;
}


declare global {
  interface Window {
    go: {
      main: {
        App: {
          ScanNetwork: (params: WailsScanParameters) => Promise<void>;
          GetScanHistory: () => Promise<ScanHistoryItem[]>;
          StartMonitoring: (hostsToMonitor: Host[], searchHidden: boolean, hiddenPortsList: number[]) => Promise<void>;
          StopMonitoring: () => Promise<void>;
          IsMonitoringActive: () => Promise<boolean>;
        };
      };
    };
    runtime: {
      EventsOn: (eventName: string, callback: (...data: any) => void) => () => void;
      EventsEmit: (eventName: string, ...data: any) => void;
      WindowMinimise?: () => void;
      WindowToggleMaximise?: () => Promise<void>; 
      Quit?: () => void;
      WindowIsMaximised?: () => Promise<boolean>; 
    };
    WailsInvoke: (method: string, ...args: any[]) => Promise<any>;
  }
}

export {};
